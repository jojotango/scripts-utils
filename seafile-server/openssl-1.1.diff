diff -ru seafile-server-v6.0.10/common/block-tx-utils.c seafile-server/common/block-tx-utils.c
--- seafile-server-v6.0.10/common/block-tx-utils.c	2017-05-14 09:17:18.407062644 +0200
+++ seafile-server/common/block-tx-utils.c	2017-05-14 10:45:01.262461162 +0200
@@ -24,43 +24,47 @@
 }
 
 int
-blocktx_encrypt_init (EVP_CIPHER_CTX *ctx,
+blocktx_encrypt_init (EVP_CIPHER_CTX **ctx,
                       const unsigned char *key,
                       const unsigned char *iv)
 {
     int ret;
 
     /* Prepare CTX for encryption. */
-    EVP_CIPHER_CTX_init (ctx);
+    *ctx = EVP_CIPHER_CTX_new ();
 
-    ret = EVP_EncryptInit_ex (ctx,
+    ret = EVP_EncryptInit_ex (*ctx,
                               EVP_aes_256_cbc(), /* cipher mode */
                               NULL, /* engine, NULL for default */
                               key,  /* derived key */
                               iv);  /* initial vector */
-    if (ret == 0)
+    if (ret == 0) {
+		EVP_CIPHER_CTX_free (*ctx);
         return -1;
+    }
 
     return 0;
 }
 
 int
-blocktx_decrypt_init (EVP_CIPHER_CTX *ctx,
+blocktx_decrypt_init (EVP_CIPHER_CTX **ctx,
                       const unsigned char *key,
                       const unsigned char *iv)
 {
     int ret;
 
     /* Prepare CTX for decryption. */
-    EVP_CIPHER_CTX_init (ctx);
+    *ctx = EVP_CIPHER_CTX_new ();
 
-    ret = EVP_DecryptInit_ex (ctx,
+    ret = EVP_DecryptInit_ex (*ctx,
                               EVP_aes_256_cbc(), /* cipher mode */
                               NULL, /* engine, NULL for default */
                               key,  /* derived key */
                               iv);  /* initial vector */
-    if (ret == 0)
+    if (ret == 0) {
+		EVP_CIPHER_CTX_free (*ctx);
         return -1;
+    }
 
     return 0;
 }
@@ -138,7 +142,7 @@
 handle_frame_content (struct evbuffer *buf, FrameParser *parser)
 {
     char *frame;
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctx;
     char *out;
     int outlen, outlen2;
     int ret = 0;
@@ -158,7 +162,7 @@
 
     evbuffer_remove (input, frame, parser->enc_frame_len);
 
-    if (EVP_DecryptUpdate (&ctx,
+    if (EVP_DecryptUpdate (ctx,
                            (unsigned char *)out, &outlen,
                            (unsigned char *)frame,
                            parser->enc_frame_len) == 0) {
@@ -167,7 +171,7 @@
         goto out;
     }
 
-    if (EVP_DecryptFinal_ex (&ctx, (unsigned char *)(out + outlen), &outlen2) == 0)
+    if (EVP_DecryptFinal_ex (ctx, (unsigned char *)(out + outlen), &outlen2) == 0)
     {
         seaf_warning ("Failed to decrypt frame content.\n");
         ret = -1;
@@ -180,7 +184,7 @@
     g_free (frame);
     g_free (out);
     parser->enc_frame_len = 0;
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
     return ret;
 }
 
@@ -222,7 +226,7 @@
 
     out = g_malloc (fragment_len + ENC_BLOCK_SIZE);
 
-    if (EVP_DecryptUpdate (&parser->ctx,
+    if (EVP_DecryptUpdate (parser->ctx,
                            (unsigned char *)out, &outlen,
                            (unsigned char *)fragment, fragment_len) == 0) {
         seaf_warning ("Failed to decrypt frame fragment.\n");
@@ -237,7 +241,7 @@
     parser->remain -= fragment_len;
 
     if (parser->remain <= 0) {
-        if (EVP_DecryptFinal_ex (&parser->ctx,
+        if (EVP_DecryptFinal_ex (parser->ctx,
                                  (unsigned char *)out,
                                  &outlen) == 0) {
             seaf_warning ("Failed to decrypt frame fragment.\n");
@@ -249,7 +253,7 @@
         if (ret < 0)
             goto out;
 
-        EVP_CIPHER_CTX_cleanup (&parser->ctx);
+        EVP_CIPHER_CTX_free (parser->ctx);
         parser->enc_init = FALSE;
         parser->enc_frame_len = 0;
     }
@@ -258,7 +262,7 @@
     g_free (fragment);
     g_free (out);
     if (ret < 0) {
-        EVP_CIPHER_CTX_cleanup (&parser->ctx);
+        EVP_CIPHER_CTX_free (parser->ctx);
         parser->enc_init = FALSE;
         parser->enc_frame_len = 0;
     }
diff -ru seafile-server-v6.0.10/common/block-tx-utils.h seafile-server/common/block-tx-utils.h
--- seafile-server-v6.0.10/common/block-tx-utils.h	2017-05-14 09:17:18.407062644 +0200
+++ seafile-server/common/block-tx-utils.h	2017-05-14 10:46:24.554740844 +0200
@@ -68,12 +68,12 @@
                               unsigned char *key, unsigned char *iv);
 
 int
-blocktx_encrypt_init (EVP_CIPHER_CTX *ctx,
+blocktx_encrypt_init (EVP_CIPHER_CTX **ctx,
                       const unsigned char *key,
                       const unsigned char *iv);
 
 int
-blocktx_decrypt_init (EVP_CIPHER_CTX *ctx,
+blocktx_decrypt_init (EVP_CIPHER_CTX **ctx,
                       const unsigned char *key,
                       const unsigned char *iv);
 
@@ -112,7 +112,7 @@
     unsigned char key[ENC_KEY_SIZE];
     unsigned char iv[ENC_BLOCK_SIZE];
     gboolean enc_init;
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctx;
 
     unsigned char key_v2[ENC_KEY_SIZE];
     unsigned char iv_v2[ENC_BLOCK_SIZE];
diff -ru seafile-server-v6.0.10/common/seafile-crypt.c seafile-server/common/seafile-crypt.c
--- seafile-server-v6.0.10/common/seafile-crypt.c	2017-05-14 09:17:18.411062662 +0200
+++ seafile-server/common/seafile-crypt.c	2017-05-14 10:12:35.371896600 +0200
@@ -254,35 +254,37 @@
         return -1;
     }
 
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctx;
     int ret;
     int blks;
 
     /* Prepare CTX for encryption. */
-    EVP_CIPHER_CTX_init (&ctx);
+    ctx = EVP_CIPHER_CTX_new ();
 
     if (crypt->version == 2)
-        ret = EVP_EncryptInit_ex (&ctx,
+        ret = EVP_EncryptInit_ex (ctx,
                                   EVP_aes_256_cbc(), /* cipher mode */
                                   NULL, /* engine, NULL for default */
                                   crypt->key,  /* derived key */
                                   crypt->iv);  /* initial vector */
     else if (crypt->version == 1)
-        ret = EVP_EncryptInit_ex (&ctx,
+        ret = EVP_EncryptInit_ex (ctx,
                                   EVP_aes_128_cbc(), /* cipher mode */
                                   NULL, /* engine, NULL for default */
                                   crypt->key,  /* derived key */
                                   crypt->iv);  /* initial vector */
     else
-        ret = EVP_EncryptInit_ex (&ctx,
+        ret = EVP_EncryptInit_ex (ctx,
                                   EVP_aes_128_ecb(), /* cipher mode */
                                   NULL, /* engine, NULL for default */
                                   crypt->key,  /* derived key */
                                   crypt->iv);  /* initial vector */
 
-    if (ret == ENC_FAILURE)
+    if (ret == ENC_FAILURE) {
+		EVP_CIPHER_CTX_free (ctx);
         return -1;
-
+	}
+	
     /* Allocating output buffer. */
     
     /*
@@ -303,7 +305,7 @@
     int update_len, final_len;
 
     /* Do the encryption. */
-    ret = EVP_EncryptUpdate (&ctx,
+    ret = EVP_EncryptUpdate (ctx,
                              (unsigned char*)*data_out,
                              &update_len,
                              (unsigned char*)data_in,
@@ -314,7 +316,7 @@
 
 
     /* Finish the possible partial block. */
-    ret = EVP_EncryptFinal_ex (&ctx,
+    ret = EVP_EncryptFinal_ex (ctx,
                                (unsigned char*)*data_out + update_len,
                                &final_len);
 
@@ -324,13 +326,13 @@
     if (ret == ENC_FAILURE || *out_len != (blks * BLK_SIZE))
         goto enc_error;
     
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
 
     return 0;
 
 enc_error:
 
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
 
     *out_len = -1;
 
@@ -365,34 +367,35 @@
         return -1;
     }
 
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctx;
     int ret;
 
     /* Prepare CTX for decryption. */
-    EVP_CIPHER_CTX_init (&ctx);
+    ctx = EVP_CIPHER_CTX_new ();
 
     if (crypt->version == 2)
-        ret = EVP_DecryptInit_ex (&ctx,
+        ret = EVP_DecryptInit_ex (ctx,
                                   EVP_aes_256_cbc(), /* cipher mode */
                                   NULL, /* engine, NULL for default */
                                   crypt->key,  /* derived key */
                                   crypt->iv);  /* initial vector */
     else if (crypt->version == 1)
-        ret = EVP_DecryptInit_ex (&ctx,
+        ret = EVP_DecryptInit_ex (ctx,
                                   EVP_aes_128_cbc(), /* cipher mode */
                                   NULL, /* engine, NULL for default */
                                   crypt->key,  /* derived key */
                                   crypt->iv);  /* initial vector */
     else
-        ret = EVP_DecryptInit_ex (&ctx,
+        ret = EVP_DecryptInit_ex (ctx,
                                   EVP_aes_128_ecb(), /* cipher mode */
                                   NULL, /* engine, NULL for default */
                                   crypt->key,  /* derived key */
                                   crypt->iv);  /* initial vector */
 
-    if (ret == DEC_FAILURE)
+    if (ret == DEC_FAILURE) {
+		EVP_CIPHER_CTX_free (ctx);
         return -1;
-
+	}
     /* Allocating output buffer. */
     
     *data_out = (char *)g_malloc (in_len);
@@ -405,7 +408,7 @@
     int update_len, final_len;
 
     /* Do the decryption. */
-    ret = EVP_DecryptUpdate (&ctx,
+    ret = EVP_DecryptUpdate (ctx,
                              (unsigned char*)*data_out,
                              &update_len,
                              (unsigned char*)data_in,
@@ -416,7 +419,7 @@
 
 
     /* Finish the possible partial block. */
-    ret = EVP_DecryptFinal_ex (&ctx,
+    ret = EVP_DecryptFinal_ex (ctx,
                                (unsigned char*)*data_out + update_len,
                                &final_len);
 
@@ -426,13 +429,13 @@
     if (ret == DEC_FAILURE || *out_len > in_len)
         goto dec_error;
 
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
     
     return 0;
 
 dec_error:
 
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
 
     *out_len = -1;
     if (*data_out != NULL)
@@ -445,7 +448,7 @@
 }
 
 int
-seafile_decrypt_init (EVP_CIPHER_CTX *ctx,
+seafile_decrypt_init (EVP_CIPHER_CTX **ctx,
                       int version,
                       const unsigned char *key,
                       const unsigned char *iv)
@@ -453,29 +456,31 @@
     int ret;
 
     /* Prepare CTX for decryption. */
-    EVP_CIPHER_CTX_init (ctx);
+    *ctx = EVP_CIPHER_CTX_new ();
 
     if (version == 2)
-        ret = EVP_DecryptInit_ex (ctx,
+        ret = EVP_DecryptInit_ex (*ctx,
                                   EVP_aes_256_cbc(), /* cipher mode */
                                   NULL, /* engine, NULL for default */
                                   key,  /* derived key */
                                   iv);  /* initial vector */
     else if (version == 1)
-        ret = EVP_DecryptInit_ex (ctx,
+        ret = EVP_DecryptInit_ex (*ctx,
                                   EVP_aes_128_cbc(), /* cipher mode */
                                   NULL, /* engine, NULL for default */
                                   key,  /* derived key */
                                   iv);  /* initial vector */
     else
-        ret = EVP_DecryptInit_ex (ctx,
+        ret = EVP_DecryptInit_ex (*ctx,
                                   EVP_aes_128_ecb(), /* cipher mode */
                                   NULL, /* engine, NULL for default */
                                   key,  /* derived key */
                                   iv);  /* initial vector */
 
-    if (ret == DEC_FAILURE)
+    if (ret == DEC_FAILURE) {
+		EVP_CIPHER_CTX_free (*ctx);
         return -1;
+    }
 
     return 0;
 }
diff -ru seafile-server-v6.0.10/common/seafile-crypt.h seafile-server/common/seafile-crypt.h
--- seafile-server-v6.0.10/common/seafile-crypt.h	2017-05-14 09:17:18.411062662 +0200
+++ seafile-server/common/seafile-crypt.h	2017-05-14 10:01:43.077619942 +0200
@@ -98,7 +98,7 @@
                  SeafileCrypt *crypt);
 
 int
-seafile_decrypt_init (EVP_CIPHER_CTX *ctx,
+seafile_decrypt_init (EVP_CIPHER_CTX **ctx,
                       int version,
                       const unsigned char *key,
                       const unsigned char *iv);
diff -ru seafile-server-v6.0.10/lib/utils.c seafile-server/lib/utils.c
--- seafile-server-v6.0.10/lib/utils.c	2017-05-14 09:17:18.415062679 +0200
+++ seafile-server/lib/utils.c	2017-05-14 11:04:58.928229443 +0200
@@ -1526,7 +1526,7 @@
         return -1;
     }
 
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctx;
     int ret, key_len;
     unsigned char key[16], iv[16];
     int blks;                   
@@ -1552,16 +1552,18 @@
     }
 
     /* Prepare CTX for encryption. */
-    EVP_CIPHER_CTX_init (&ctx);
+    ctx = EVP_CIPHER_CTX_new ();
 
-    ret = EVP_EncryptInit_ex (&ctx,
+    ret = EVP_EncryptInit_ex (ctx,
                               EVP_aes_128_ecb(), /* cipher mode */
                               NULL, /* engine, NULL for default */
                               key,  /* derived key */
                               iv);  /* initial vector */
 
-    if (ret == ENC_FAILURE)
+    if (ret == ENC_FAILURE) {
+		EVP_CIPHER_CTX_free (ctx);
         return -1;
+    }
 
     /* Allocating output buffer. */
     
@@ -1583,7 +1585,7 @@
     int update_len, final_len;
 
     /* Do the encryption. */
-    ret = EVP_EncryptUpdate (&ctx,
+    ret = EVP_EncryptUpdate (ctx,
                              (unsigned char*)*data_out,
                              &update_len,
                              (unsigned char*)data_in,
@@ -1594,7 +1596,7 @@
 
 
     /* Finish the possible partial block. */
-    ret = EVP_EncryptFinal_ex (&ctx,
+    ret = EVP_EncryptFinal_ex (ctx,
                                (unsigned char*)*data_out + update_len,
                                &final_len);
 
@@ -1604,13 +1606,13 @@
     if (ret == ENC_FAILURE || *out_len != (blks * BLK_SIZE))
         goto enc_error;
     
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
 
     return 0;
 
 enc_error:
 
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
 
     *out_len = -1;
 
@@ -1642,7 +1644,7 @@
         return -1;
     }
 
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctx;
     int ret, key_len;
     unsigned char key[16], iv[16];
 
@@ -1668,16 +1670,18 @@
 
 
     /* Prepare CTX for decryption. */
-    EVP_CIPHER_CTX_init (&ctx);
+    ctx = EVP_CIPHER_CTX_new ();
 
-    ret = EVP_DecryptInit_ex (&ctx,
+    ret = EVP_DecryptInit_ex (ctx,
                               EVP_aes_128_ecb(), /* cipher mode */
                               NULL, /* engine, NULL for default */
                               key,  /* derived key */
                               iv);  /* initial vector */
 
-    if (ret == DEC_FAILURE)
+    if (ret == DEC_FAILURE) {
+		EVP_CIPHER_CTX_free (ctx);
         return -1;
+    }
 
     /* Allocating output buffer. */
     
@@ -1691,7 +1695,7 @@
     int update_len, final_len;
 
     /* Do the decryption. */
-    ret = EVP_DecryptUpdate (&ctx,
+    ret = EVP_DecryptUpdate (ctx,
                              (unsigned char*)*data_out,
                              &update_len,
                              (unsigned char*)data_in,
@@ -1702,7 +1706,7 @@
 
 
     /* Finish the possible partial block. */
-    ret = EVP_DecryptFinal_ex (&ctx,
+    ret = EVP_DecryptFinal_ex (ctx,
                                (unsigned char*)*data_out + update_len,
                                &final_len);
 
@@ -1712,13 +1716,13 @@
     if (ret == DEC_FAILURE || *out_len > in_len)
         goto dec_error;
 
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
     
     return 0;
 
 dec_error:
 
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
 
     *out_len = -1;
     if (*data_out != NULL)
diff -ru seafile-server-v6.0.10/server/access-file.c seafile-server/server/access-file.c
--- seafile-server-v6.0.10/server/access-file.c	2017-05-14 09:17:18.419062697 +0200
+++ seafile-server/server/access-file.c	2017-05-14 12:43:21.159251856 +0200
@@ -58,7 +58,7 @@
     Seafile *file;
     SeafileCrypt *crypt;
     gboolean enc_init;
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctx;
     BlockHandle *handle;
     size_t remain;
     int idx;
@@ -152,7 +152,7 @@
     }
 
     if (data->enc_init)
-        EVP_CIPHER_CTX_cleanup (&data->ctx);
+        EVP_CIPHER_CTX_free (data->ctx);
 
     seafile_unref (data->file);
     g_free (data->crypt);
@@ -299,7 +299,7 @@
         seaf_block_manager_block_handle_free (seaf->block_mgr, handle);
         data->handle = NULL;
         if (data->crypt != NULL) {
-            EVP_CIPHER_CTX_cleanup (&data->ctx);
+            EVP_CIPHER_CTX_free (data->ctx);
             data->enc_init = FALSE;
         }
 
@@ -335,7 +335,7 @@
             goto err;
         }
 
-        int ret = EVP_DecryptUpdate (&data->ctx,
+        int ret = EVP_DecryptUpdate (data->ctx,
                                      (unsigned char *)dec_out,
                                      &dec_out_len,
                                      (unsigned char *)buf,
@@ -353,7 +353,7 @@
         /* If it's the last piece of a block, call decrypt_final()
          * to decrypt the possible partial block. */
         if (data->remain == 0) {
-            ret = EVP_DecryptFinal_ex (&data->ctx,
+            ret = EVP_DecryptFinal_ex (data->ctx,
                                        (unsigned char *)dec_out,
                                        &dec_out_len);
             if (ret == 0) {
diff -ru seafile-server-v6.0.10/server/block-tx-server.c seafile-server/server/block-tx-server.c
--- seafile-server-v6.0.10/server/block-tx-server.c	2017-05-14 09:17:18.419062697 +0200
+++ seafile-server/server/block-tx-server.c	2017-05-14 12:26:12.186886438 +0200
@@ -205,7 +205,7 @@
 send_auth_response (BlockTxServer *server, int status)
 {
     AuthResponse rsp;
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctx;
     int ret = 0;
 
     rsp.status = htonl (status);
@@ -221,21 +221,21 @@
         goto out;
     }
 
-    if (send_encrypted_data (&ctx, server->data_fd, &rsp, sizeof(rsp)) < 0)
+    if (send_encrypted_data (ctx, server->data_fd, &rsp, sizeof(rsp)) < 0)
     {
         seaf_warning ("Send auth response: failed to send data.\n");
         ret = -1;
         goto out;
     }
 
-    if (send_encrypted_data_frame_end (&ctx, server->data_fd) < 0) {
+    if (send_encrypted_data_frame_end (ctx, server->data_fd) < 0) {
         seaf_warning ("Send auth response: failed to end.\n");
         ret = -1;
         goto out;
     }
 
 out:
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
     return ret;
 }
 
@@ -308,7 +308,7 @@
 send_block_response_header (BlockTxServer *server, int status)
 {
     ResponseHeader header;
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctx;
     int ret = 0;
 
     header.status = htonl (status);
@@ -325,7 +325,7 @@
         goto out;
     }
 
-    if (send_encrypted_data (&ctx, server->data_fd,
+    if (send_encrypted_data (ctx, server->data_fd,
                              &header, sizeof(header)) < 0)
     {
         seaf_warning ("Send block response header %s: failed to send data.\n",
@@ -334,7 +334,7 @@
         goto out;
     }
 
-    if (send_encrypted_data_frame_end (&ctx, server->data_fd) < 0) {
+    if (send_encrypted_data_frame_end (ctx, server->data_fd) < 0) {
         seaf_warning ("Send block response header %s: failed to end.\n",
                       server->curr_block_id);
         ret = -1;
@@ -342,7 +342,7 @@
     }
 
 out:
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
     return ret;
 }
 
@@ -447,7 +447,7 @@
 {
     int n, remain;
     int ret = 0;
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctx;
     char send_buf[SEND_BUFFER_SIZE];
 
     if (server->version == 1)
@@ -472,7 +472,7 @@
             goto out;
         }
 
-        if (send_encrypted_data (&ctx, server->data_fd, send_buf, n) < 0) {
+        if (send_encrypted_data (ctx, server->data_fd, send_buf, n) < 0) {
             seaf_warning ("Send block %s: failed to send data.\n", block_id);
             ret = -1;
             goto out;
@@ -481,7 +481,7 @@
         remain -= n;
     }
 
-    if (send_encrypted_data_frame_end (&ctx, server->data_fd) < 0) {
+    if (send_encrypted_data_frame_end (ctx, server->data_fd) < 0) {
         seaf_warning ("Send block %s: failed to end.\n", block_id);
         ret = -1;
         goto out;
@@ -490,7 +490,7 @@
     seaf_debug ("Send block %s done.\n", server->curr_block_id);
 
 out:
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
     return ret;
 }
 
@@ -661,7 +661,7 @@
     }
 
     if (server->parser.enc_init)
-        EVP_CIPHER_CTX_cleanup (&server->parser.ctx);
+        EVP_CIPHER_CTX_free (server->parser.ctx);
 
     evbuffer_free (server->recv_buf);
     evutil_closesocket (server->data_fd);
diff -ru seafile-server-v6.0.10/server/gc/fsck.c seafile-server/server/gc/fsck.c
--- seafile-server-v6.0.10/server/gc/fsck.c	2017-05-14 09:17:18.419062697 +0200
+++ seafile-server/server/gc/fsck.c	2017-05-14 11:27:49.779564782 +0200
@@ -682,7 +682,7 @@
     char buf[64 * 1024];
     int n;
     int remain;
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctx;
     char *dec_out;
     int dec_out_len;
     gboolean ret = TRUE;
@@ -704,7 +704,7 @@
         return FALSE;
     }
 
-    if (seafile_decrypt_init (&ctx, crypt->version,
+    if (seafile_decrypt_init (ctx, crypt->version,
                               crypt->key, crypt->iv) < 0) {
         seaf_warning ("Failed to init decrypt.\n");
         ret = FALSE;
@@ -730,7 +730,7 @@
             break;
         }
 
-        if (EVP_DecryptUpdate (&ctx,
+        if (EVP_DecryptUpdate (ctx,
                                (unsigned char *)dec_out,
                                &dec_out_len,
                                (unsigned char *)buf,
@@ -750,7 +750,7 @@
         }
 
         if (remain == 0) {
-            if (EVP_DecryptFinal_ex (&ctx,
+            if (EVP_DecryptFinal_ex (ctx,
                                      (unsigned char *)dec_out,
                                      &dec_out_len) == 0) {
                 seaf_warning ("Failed to decrypt block %s .\n", block_id);
@@ -772,7 +772,7 @@
         g_free (dec_out);
     }
 
-    EVP_CIPHER_CTX_cleanup (&ctx);
+    EVP_CIPHER_CTX_free (ctx);
 
 out:
     g_free (bmd);
diff -ru seafile-server-v6.0.10/server/pack-dir.c seafile-server/server/pack-dir.c
--- seafile-server-v6.0.10/server/pack-dir.c	2017-05-14 09:17:18.419062697 +0200
+++ seafile-server/server/pack-dir.c	2017-05-14 12:47:35.324359677 +0200
@@ -86,7 +86,7 @@
     BlockMetadata *bmd = NULL;
     char *blk_id = NULL;
     uint32_t remain = 0;
-    EVP_CIPHER_CTX ctx;
+    EVP_CIPHER_CTX *ctx;
     gboolean enc_init = FALSE;
     char *dec_out = NULL;
     int dec_out_len = -1;
@@ -196,7 +196,7 @@
                     goto out;
                 }
 
-                int r = EVP_DecryptUpdate (&ctx,
+                int r = EVP_DecryptUpdate (ctx,
                                            (unsigned char *)dec_out,
                                            &dec_out_len,
                                            (unsigned char *)buf,
@@ -221,7 +221,7 @@
                 /* If it's the last piece of a block, call decrypt_final()
                  * to decrypt the possible partial block. */
                 if (remain == 0) {
-                    r = EVP_DecryptFinal_ex (&ctx,
+                    r = EVP_DecryptFinal_ex (ctx,
                                              (unsigned char *)dec_out,
                                              &dec_out_len);
                     if (r != 1) {
@@ -264,7 +264,7 @@
         seaf_block_manager_block_handle_free(seaf->block_mgr, handle);
     }
     if (crypt != NULL && enc_init)
-        EVP_CIPHER_CTX_cleanup (&ctx);
+        EVP_CIPHER_CTX_free (ctx);
     g_free (dec_out);
 
     return ret;
